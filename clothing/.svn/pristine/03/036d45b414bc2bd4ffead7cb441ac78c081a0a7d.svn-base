/**
 * _______________ *______________ *______________ *_____________ *____________ *____________ *___________ *__________ *________ *_______ *_______ *______ *_____ *____ *____ *___ *___ *___ *___ *____ *_____ *______ *________
 */
package com.pyjh.clothing.controller;

import com.alibaba.fastjson.JSON;
import com.pyjh.clothing.entity.PageData;
import com.pyjh.clothing.service.MemberService;
import com.pyjh.clothing.util.CodeMessage;
import com.pyjh.clothing.util.Message;
import com.pyjh.clothing.util.SmsClientSend;
import com.pyjh.clothing.util.Tools;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.util.HashMap;
import java.util.Map;

@Api("用户")
@RestController
@RequestMapping("member")
public class MemberController extends CodeMessage {

    @Resource
    MemberService memberService;

    HttpSession session;

    @ApiOperation("用户登陆")
    @RequestMapping(value = "/getProduct", method = RequestMethod.POST)
    public String getProductList(String mobile, String password) {
        if (mobile == null || password == null) {
            return Message.mesFalse(code_400, message_400);
        }
        PageData res = memberService.memberLogin(mobile, password);
        if (res != null) {
            Integer status = Integer.parseInt(res.get("status").toString());
            if (status == 0) {
                return Message.mesFalse(code_208, message_208);
            }
            return Message.mesTrue(code_200, JSON.toJSONString(res), message_200);
        }
        return Message.mesFalse(code_203, message_203);
    }

    /**
     * 注册获取手机验证码
     *
     * @param mobile 手机账号 String
     * @return status 状态码 "200"发送成功 "210"发送失败
     */
    @ApiOperation("注册验证码")
    @RequestMapping(value = "/register/code", method = RequestMethod.POST)
    public Object registerCode(String mobile, HttpServletRequest request) {
        if (Tools.isEmpty(mobile)) {
            return Message.mesFalse(code_400, message_400);
        }
        Map<String, Object> data = new HashMap<>();
        session = request.getSession();
        if (memberService.findForEntity(mobile)) {
            return Message.mesFalse(code_202, message_202);
        }
        // 获取随机验证码
        String code = Tools.getRandomNum();
        String msg = "【东方云订制】您本次操作的验证码是" + code + "。如非本人操作，请忽略。\n（彭友聚汇提供技术支持）";
        String resultString = SmsClientSend.sendSms(mobile, msg);
        int Rspcode = Tools.SmsClientSendCode(resultString);
        if (Rspcode == 0) {
            session.setAttribute("registercode", code);
            data.put("registercode", code);
            return Message.mesTrue(code_202, JSON.toJSONString(data), message_200);
        }
        return Message.mesFalse(code_201, message_201);
    }

    @ApiOperation("用户注册")
    @RequestMapping(value = "/memberRegister", method = RequestMethod.POST)
    public String userRegister(String mobile, String password, String code) {
        if (Tools.isEmpty(mobile) || Tools.isEmpty(password) || Tools.isEmpty(code)) {
            return Message.mesFalse(code_400, message_400);
        }
        PageData pageData = new PageData();
        Integer memberId = null;
        pageData.put("mobile", mobile);
        pageData.put("password", password);
        String registercode = session.getAttribute("registercode").toString();
        if (registercode.equals(code)) {
            memberId = memberService.addMember(pageData);
        }
        if (memberId != null) {
            return Message.mesTrue(code_200, JSON.toJSONString(memberId), message_200);
        }
        return Message.mesFalse(code_501, message_501);
    }

    @ApiOperation("密码修改")
    @RequestMapping(value = "/modifyPassWord", method = RequestMethod.POST)
    public String modifyPassWord(String mobile, String password, Integer memberId, String code) {
        if (Tools.isEmpty(mobile) || Tools.isEmpty(password) || Tools.isEmpty(code) || memberId == null) {
            return Message.mesFalse(code_400, message_400);
        }
        PageData pageData = new PageData();
        pageData.put("mobile", mobile);
        pageData.put("password", password);
        pageData.put("memberId", memberId);
        String registercode = session.getAttribute("registercode").toString();
        Integer res = null;
        if (registercode.equals(code)) {
            res = memberService.editMember(pageData);
        }
        if (res != null) {
            return Message.mesTrue(code_200, JSON.toJSONString(res), message_200);
        }
        return Message.mesFalse(code_501, message_501);
    }

}
