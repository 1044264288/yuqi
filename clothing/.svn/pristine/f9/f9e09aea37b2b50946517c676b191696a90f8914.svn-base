/**
 * _______________ *______________ *______________ *_____________ *____________ *____________ *___________ *__________ *________ *_______ *_______ *______ *_____ *____ *____ *___ *___ *___ *___ *____ *_____ *______ *________
 */
package com.pyjh.clothing.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.pyjh.clothing.entity.PageData;
import com.pyjh.clothing.service.MemberService;
import com.pyjh.clothing.util.CodeMessage;
import com.pyjh.clothing.util.Message;
import com.pyjh.clothing.util.SmsClientSend;
import com.pyjh.clothing.util.Tools;
import com.pyjh.clothing.wxpay.util.ConstantUtil;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("member")
@Api(value = "member", description = "用户接口")
public class MemberController extends CodeMessage {

    @Resource
    MemberService memberService;

    HttpSession session;

    @ApiOperation("用户登陆")
    @RequestMapping(value = "/memberLogin", method = RequestMethod.POST)
    public String memberLogin(String mobile, String password) {
        if (mobile == null || password == null) {
            return Message.mesFalse(code_400, message_400);
        }
        PageData res = memberService.memberLogin(mobile, password);
        if (res != null) {
            Integer status = Integer.parseInt(res.get("status").toString());
            if (status == 0) {
                return Message.mesFalse(code_208, message_208);
            }
            return Message.mesTrue(code_200, JSON.toJSONString(res), message_200);
        }
        return Message.mesFalse(code_203, message_203);
    }

    /**
     * 注册获取手机验证码
     *
     * @param mobile 手机账号 String
     * @return status 状态码 "200"发送成功 "210"发送失败
     */
    @ApiOperation("注册验证码")
    @RequestMapping(value = "/register/code", method = RequestMethod.POST)
    public Object registerCode(String mobile, HttpServletRequest request) {
        if (Tools.isEmpty(mobile)) {
            return Message.mesFalse(code_400, message_400);
        }
        Map<String, Object> data = new HashMap<>();
        session = request.getSession();
        // 获取随机验证码
        String code = Tools.getRandomNum();
        String msg = "【东方云订制】您本次操作的验证码是" + code + "。如非本人操作，请忽略。\n（彭友聚汇提供技术支持）";
        String resultString = SmsClientSend.sendSms(mobile, msg);
        int Rspcode = Tools.SmsClientSendCode(resultString);
        if (Rspcode == 0) {
            session.setAttribute("registercode", code);
            data.put("registercode", code);
            return Message.mesTrue(code_200, JSON.toJSONString(data), message_200);
        }
        return Message.mesFalse(code_201, message_201);
    }

    @ApiOperation("用户注册")
    @RequestMapping(value = "/memberRegister", method = RequestMethod.POST)
    public String userRegister(String mobile, String password, String code) {
        if (Tools.isEmpty(mobile) || Tools.isEmpty(password) || Tools.isEmpty(code)) {
            return Message.mesFalse(code_400, message_400);
        }
        PageData pageData = new PageData();
        Integer memberId = null;
        pageData.put("mobile", mobile);
        pageData.put("password", password);
        if (!memberService.findForEntity(mobile)) {
            return Message.mesFalse(code_202, message_202);
        }
        String registercode = session.getAttribute("registercode").toString();
        if (registercode.equals(code)) {
            memberId = memberService.addMember(pageData);
        }
        if (memberId != null) {
            return Message.mesTrue(code_200, JSON.toJSONString(memberId), message_200);
        }
        return Message.mesFalse(code_501, message_501);
    }

    @ApiOperation("密码修改")
    @RequestMapping(value = "/modifyPassWord", method = RequestMethod.POST)
    public String modifyPassWord(String mobile, String password, Integer memberId, String code) {
        if (Tools.isEmpty(mobile) || Tools.isEmpty(password) || Tools.isEmpty(code) || memberId == null) {
            return Message.mesFalse(code_400, message_400);
        }
        PageData pageData = new PageData();
        pageData.put("mobile", mobile);
        pageData.put("password", password);
        pageData.put("memberId", memberId);
        if (!memberService.findForEntity(mobile)) {
            System.out.println(memberService.findForEntity(mobile));
            String registercode = session.getAttribute("registercode").toString();
            Integer res = null;
            System.out.println(registercode);
            if (registercode.equals(code)) {
                res = memberService.editMember(pageData);
            }
            if (res != null) {
                return Message.mesTrue(code_200, JSON.toJSONString(res), message_200);
            }
        }
        return Message.mesFalse(code_501, message_501);
    }

    @ApiOperation("用户信息修改")
    @RequestMapping(value = "/modifyMember", method = RequestMethod.POST)
    public String modifyMember(String member) {
        if (Tools.isEmpty(member)) {
            return Message.mesFalse(code_400, message_400);
        }
        PageData pageData = JSONObject.parseObject(member, PageData.class);
        int res = memberService.editMember(pageData);
        if (res > 0) {
            return Message.mesTrue(code_200, JSON.toJSONString(res), message_200);
        }
        return Message.mesFalse(code_501, message_501);
    }

    @RequestMapping(value = "/getOpenId", method = {RequestMethod.POST,
            RequestMethod.GET}, produces = "application/json;charset=UTF-8")
    public JSONObject getOpenId(String code) {
        String wxCode = code;
        String requestUrl = "https://api.weixin.qq.com/sns/jscode2session"; // 请求地址
        Map<String, String> requestUrlParam = new HashMap<String, String>();
        requestUrlParam.put("appid", ConstantUtil.APP_ID); // 开发者设置中的appId
        requestUrlParam.put("secret", ConstantUtil.APP_SECRET); // 开发者设置中的appSecret
        requestUrlParam.put("js_code", wxCode); // 小程序调用wx.login返回的code
        requestUrlParam.put("grant_type", "authorization_code"); // 默认参数

        /**
         * 发送post请求读取调用微信 https://api.weixin.qq.com/sns/jscode2session 接口获取openid用户唯一标识
         */
        JSONObject jsonObject = JSON.parseObject(sendPost(requestUrl, requestUrlParam));
        return jsonObject;
    }

    /**
     * 向指定 URL 发送POST方法的请求
     *
     * @param url 发送请求的 URL
     *            请求参数
     * @return 所代表远程资源的响应结果
     */
    public static String sendPost(String url, Map<String, ?> paramMap) {
        PrintWriter out = null;
        BufferedReader in = null;
        String result = "";

        String param = "";
        Iterator<String> it = paramMap.keySet().iterator();

        while (it.hasNext()) {
            String key = it.next();
            param += key + "=" + paramMap.get(key) + "&";
        }

        try {
            URL realUrl = new URL(url);
            // 打开和URL之间的连接
            URLConnection conn = realUrl.openConnection();
            // 设置通用的请求属性
            conn.setRequestProperty("accept", "*/*");
            conn.setRequestProperty("connection", "Keep-Alive");
            conn.setRequestProperty("Accept-Charset", "utf-8");
            conn.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
            // 发送POST请求必须设置如下两行
            conn.setDoOutput(true);
            conn.setDoInput(true);
            // 获取URLConnection对象对应的输出流
            out = new PrintWriter(conn.getOutputStream());
            // 发送请求参数
            out.print(param);
            // flush输出流的缓冲
            out.flush();
            // 定义BufferedReader输入流来读取URL的响应
            in = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));
            String line;
            while ((line = in.readLine()) != null) {
                result += line;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        // 使用finally块来关闭输出流、输入流
        finally {
            try {
                if (out != null) {
                    out.close();
                }
                if (in != null) {
                    in.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        return result;
    }

    @ApiOperation("查询全部用户信息")
    @GetMapping("getmember")
    public String getmember() {
        List<PageData> pageDataList = memberService.getmember();
        if (pageDataList != null) {
            String data = JSON.toJSONString(pageDataList);
            return Message.mesTrue(code_200, data, message_200);
        }
        return Message.mesFalse(code_501, message_501);
    }
}
